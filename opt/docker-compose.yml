version: "3.3"

services:
 #############################
 #DATABASES
 
 #############################
  #Login - 192.168.26.22
 postgres_login:
  image: "postgres:14"
  container_name: "postgres_login"
  environment:    
   - POSTGRES_PASSWORD=gioniel2606
   - ALLOW_EMPTY_PASSWORD=no      
  restart: always
  ports:
   - '5433:5432'
  networks:
    app_network:
      ipv4_address: 192.168.26.22
  volumes:
   - '/opt/application/postgresql_login/data:/var/lib/postgresql/data' 
 #############################
 #Cliente - 192.168.26.12
 postgres_cliente:
  image: "postgres:14"
  container_name: "postgres_cliente"
  environment:    
   - POSTGRES_PASSWORD=gioniel2606
   - ALLOW_EMPTY_PASSWORD=no      
  restart: always
  ports:
   - '5432:5432'
  networks:
    app_network:
      ipv4_address: 192.168.26.12
  volumes:
   - '/opt/application/postgresql_cliente/data:/var/lib/postgresql/data' 
 
 #############################
 #Reservas - 192.168.26.42
 mongo_reservas:  
  image: mongo:latest
  container_name: mongo_reservas
  environment:
    MONGO_INITDB_ROOT_USERNAME: admin
    MONGO_INITDB_ROOT_PASSWORD: password
    MONGO_INITDB_DATABASE: flight-reservations
  ports:
    - '27017:27017'
  volumes:
    - mongo-data:/data/db
  networks:
    app_network:
      ipv4_address: 192.168.26.42

  
 #############################
 #BACKEND SERVICES
 
 #############################
 #Login - 192.168.26.23
 backend-login:
  depends_on:
   - postgres_login
  image: "backend-login" 
  container_name: "backend-login"
  build: ./ 
  environment:
   - DB_HOST=192.168.26.22
  restart: always
  ports:
   - '8081:8081'  
  networks:
    app_network:
      ipv4_address: 192.168.26.23
  volumes:
   - '/opt/application/login:/var/lib/kotlin'
#############################     
#Vuelos - 192.168.26.13
 backend-cliente:
  depends_on:
   - postgres_cliente
  image: "backend-cliente" 
  container_name: "backend-cliente"
  build: ./   
  restart: always
  ports:
   - '8080:8080'  
  networks:
    app_network:
      ipv4_address: 192.168.26.13  
#############################     
#Reservas - 192.168.26.43
 backend-reserva:
  depends_on:
   - mongo_reservas
  image: "backend-reserva" 
  container_name: "backend-reserva"
  build: ./   
  restart: always
  ports:
   - '4000:4000'  
  networks:
    app_network:
      ipv4_address: 192.168.26.43  


 #############################
 #FRONTEND
 
 #############################
 #front - 192.168.26.80
 frontend:
  depends_on:
   - postgres_login
  image: "frontend" 
  container_name: "frontend"
  build: ./   
  restart: always
  ports:
   - '9090:9090'  
  networks:
    app_network:
      ipv4_address: 192.168.26.80

volumes:
 mongo-data:
  driver: local

networks:
 app_network:
  driver: bridge 
  driver_opts: 
   com.docker.network.enable_ipv6: 'false'
  ipam: 
   driver: default
   config:
    - subnet: 192.168.26.0/24 
      gateway: 192.168.26.1
